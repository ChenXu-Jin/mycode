############################## Human at step keyword_extraction ##############################

Objective: Analyze the given question and hint to identify and extract keywords, keyphrases, and named entities. These elements are crucial for understanding the core components of the inquiry and the guidance provided. This process involves recognizing and isolating significant terms and phrases that could be instrumental in formulating searches or queries related to the posed question.

Instructions:

Read the Question Carefully: Understand the primary focus and specific details of the question. Look for any named entities (such as organizations, locations, etc.), technical terms, and other phrases that encapsulate important aspects of the inquiry.

Analyze the Hint: The hint is designed to direct attention toward certain elements relevant to answering the question. Extract any keywords, phrases, or named entities that could provide further clarity or direction in formulating an answer.

List Keyphrases and Entities: Combine your findings from both the question and the hint into a single Python list. This list should contain:

Keywords: Single words that capture essential aspects of the question or hint.
Keyphrases: Short phrases or named entities that represent specific concepts, locations, organizations, or other significant details.
Ensure to maintain the original phrasing or terminology used in the question and hint.

Example 1:
Question: "What is the annual revenue of Acme Corp in the United States for 2022?"
Hint: "Focus on financial reports and U.S. market performance for the fiscal year 2022."

["annual revenue", "Acme Corp", "United States", "2022", "financial reports", "U.S. market performance", "fiscal year"]

Example 2:
Question: "In the Winter and Summer Olympics of 1988, which game has the most number of competitors? Find the difference of the number of competitors between the two games."
Hint: "the most number of competitors refer to MAX(COUNT(person_id)); SUBTRACT(COUNT(person_id where games_name = '1988 Summer'), COUNT(person_id where games_name = '1988 Winter'));"

["Winter Olympics", "Summer Olympics", "1988", "1988 Summer", "Summer", "1988 Winter", "Winter", "number of competitors", "difference", "MAX(COUNT(person_id))", "games_name", "person_id"]

Example 3:
Question: "How many Men's 200 Metres Freestyle events did Ian James Thorpe compete in?"
Hint: "Men's 200 Metres Freestyle events refer to event_name = 'Swimming Men''s 200 metres Freestyle'; events compete in refers to event_id;"

["Swimming Men's 200 metres Freestyle", "Ian James Thorpe", "Ian", "James", "Thorpe", "compete in", "event_name", "event_id"]

Task:
Given the following question and hint, identify and list all relevant keywords, keyphrases, and named entities.

Question: Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.
Hint: TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'

Please provide your findings as a Python list, capturing the essence of both the question and hint through the identified terms and phrases. 
Only output the Python list, no explanations needed. 

############################## AI at step keyword_extraction ##############################

[
    "chemical compounds",
    "molecule TR047",
    "double-bond",
    "percent",
    "bond_type",
    "DIVIDE",
    "SUM(bond_type = ' = ')",
    "COUNT(all bond_id)",
    "molecule_id = 'TR047'"
]

############################## Human at step sql_generate ##############################

You are a data science expert.
Below, you are presented with a database schema and a question.
Your task is to read the schema, understand the question, and generate a valid SQLite query to answer the question.
Before generating the final SQL query think step by step on how to write the query.

Database Schema
###
CREATE TABLE atom (
  `atom_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `element` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE bond (
  `bond_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `bond_type` TEXT DEFAULT NULL,
  PRIMARY KEY (`bond_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE connected (
  `atom_id` TEXT NOT NULL,
  `atom_id2` TEXT NOT NULL,
  `bond_id` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`,`atom_id2`),
  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE molecule (
  `molecule_id` TEXT NOT NULL,
  `label` TEXT DEFAULT NULL,
  PRIMARY KEY (`molecule_id`)
);

This schema offers an in-depth description of the database's architecture, detailing tables, columns, primary keys, foreign keys, and any pertinent information regarding relationships or constraints. Special attention should be given to the examples listed beside each column, as they directly hint at which columns are relevant to our query.

Database admin instructions:
1. When you need to find the highest or lowest values based on a certain condition, using ORDER BY + LIMIT 1 is prefered over using MAX/MIN within sub queries.
2. If predicted query includes an ORDER BY clause to sort the results, you should only include the column(s) used for sorting in the SELECT clause if the question specifically ask for them. Otherwise, omit these columns from the SELECT.
3. If the question doesn't specify exactly which columns to select, between name column and id column, prefer to select id column.
4. Make sure you only output the information that is asked in the question. If the question asks for a specific column, make sure to only include that column in the SELECT clause, nothing more.
5. Predicted query should return all of the information asked in the question without any missing or extra information.
6. For key phrases mentioned in the question, we have provided the most similar values within the columns denoted by "-- examples" in front of the corresponding column names. This is a crucial hint indicating the correct columns to use for your SQL query.
7. No matter of how many things the question asks, you should only return one SQL query as the answer having all the information asked in the question, seperated by a comma.
8. Never use || to concatenate columns in the SELECT. Rather output the columns as they are.
9. If you are joining multiple tables, make sure to use alias names for the tables and use the alias names to reference the columns in the query. Use T1, T2, T3, ... as alias names.
10. If you are doing a logical operation on a column, such as mathematical operations and sorting, make sure to filter null values within those columns.

###
Question: 
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. 

Hint:
TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'

Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your thought process on how you arrived at the final SQL query.",
    "SQL": "Your SQL query in a single string."
}

Priority should be given to columns that have been explicitly matched with examples relevant to the question's context.

Take a deep breath and think step by step to find the correct sqlite SQL query. If you follow all the instructions and generate the correct query, I will give you 1 million dollars.

############################## AI at step sql_generate ##############################

{
    "chain_of_thought_reasoning": "To determine the percentage of double bonds in the molecule TR047, we need to focus on the 'bond' table, where bond types are defined. We will first filter for bonds belonging to molecule TR047. Then, we will count how many of these bonds have a bond_type of ' = ' to find the double bonds. To calculate the percentage, we will divide the count of double bonds by the total count of bonds for TR047. This can be done within a single query, using conditional counting in SQLite.",
    "SQL": "SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"
}

############################## Human at step evaluator_generate_result ##############################

You are a database technology expert proficient in SQL statements.
Below, you will be presented with a natural language question, an SQL query, and the corresponding database content for that query.
Your task is to determine whether the provided SQL query correctly selects the database schema items and accurately answers the given question.
If the SQL query fails to correctly answer the question, please identify the specific errors.
Before making the final judgment, think step by step to analyze the alignment between the question, SQL query, and execution result.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

SQL Query:
SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Database Content:
{'atom': ['atom_id', 'molecule_id', 'element', 'moleculeid'], 'bond': ['bond_id', 'molecule_id', 'bond_type', 'bondtype', 'bondid', 'moleculeid'], 'connected': ['atom_id', 'atom_id2', 'bond_id', 'bondid'], 'molecule': ['molecule_id', 'label', 'moleculeid']}

Validation Guidelines:

1. Carefully analyze the Question to understand its intent, including what is being queried, conditions, filters, and expected outputs.
2. Check if the SQL Query logically corresponds to the Question, covering all necessary components such as filtering conditions, aggregations, and groupings.
3. Cross-check the Execution Result with the Question to ensure the output aligns with the intent.
4. Ensure the SQL Query is not missing any critical conditions or columns required to fulfill the Question's requirements.
5. If the SQL Query satisfies the intent and the Execution Result correctly answers the Question, consider it Valid. Otherwise, consider it Invalid.
6. Consider scenarios where the SQL Query may partially meet the intent but fails in key aspects, leading to an Invalid outcome.
7. Base your judgment strictly on the correspondence between the question, SQL query, and execution result without making assumptions.

Output Format:
Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your thought process on how you arrived at the final judgment.",
    "judgment": "Valid or Invalid"
}

Take a deep breath, review all elements carefully, and think step by step.

############################## AI at step evaluator_generate_result ##############################

{
    "chain_of_thought_reasoning": "The question asks for the percentage of chemical compounds containing the molecule TR047 that form a double bond. The SQL query attempts to calculate this percentage by selecting the sum of bonds that are classified as 'double bonds' (represented here as ' = ') from the 'bond' table where the 'molecule_id' is TR047. However, upon reviewing the provided SQL query, there is an issue with how the double bond is signified; it appears to use the string ' = ' for double bonds, which is not a conventional representation (typically, double bonds are denoted by characters like '=' or '==' in other contexts). This may lead to fidelity issues regarding whether \u2018 = \u2019 accurately captures the intended double bond criteria. Additionally, the query counts bonds only for TR047 but does not check whether there are any bonds associated with this molecule before performing percentage calculations, meaning it could result in division by zero if there are no bonds. These do make this query fall short of completely and accurately executing the requirement of the question. Hence, the SQL query is invalid as it may not correctly meet the request of the Question.",
    "judgment": "Invalid"
}

############################## Human at step Generate feedbacks ##############################

You are a data science and SQL optimization expert.
Below, you are presented with the execution result of an SQL query, an analysis of why this query does not meet the requirements, and the natural language question it aims to answer.
Your task is to generate actionable feedback to guide the modification of the SQL query so that it aligns with the question's intent.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

Predicted SQL:
SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Execution Result:
(0.0,)

Evaluation Result:
{'chain_of_thought_reasoning': "The question asks for the percentage of chemical compounds containing the molecule TR047 that form a double bond. The SQL query attempts to calculate this percentage by selecting the sum of bonds that are classified as 'double bonds' (represented here as ' = ') from the 'bond' table where the 'molecule_id' is TR047. However, upon reviewing the provided SQL query, there is an issue with how the double bond is signified; it appears to use the string ' = ' for double bonds, which is not a conventional representation (typically, double bonds are denoted by characters like '=' or '==' in other contexts). This may lead to fidelity issues regarding whether ‘ = ’ accurately captures the intended double bond criteria. Additionally, the query counts bonds only for TR047 but does not check whether there are any bonds associated with this molecule before performing percentage calculations, meaning it could result in division by zero if there are no bonds. These do make this query fall short of completely and accurately executing the requirement of the question. Hence, the SQL query is invalid as it may not correctly meet the request of the Question.", 'judgment': 'Invalid'}


Please respond with a JSON object structured as follows:

{
    "feedback": "Specific, actionable steps to modify the SQL query to align with the question's intent."
}

Take a deep breath and review the inputs thoroughly. Generate precise, actionable feedback that clearly explains how to modify the SQL query to meet the requirements.

############################## AI at step Generate feedbacks ##############################

{
    "feedback": "1. Review the bond_type representation: Ensure that the double bond is represented correctly in the database schema. If double bonds are typically represented by '=' or another consistent character, update the condition in the SQL query accordingly, e.g., change ' = ' to '=' or '==' if necessary. \n\n2. Handle potential division by zero: Before performing the percentage calculation, include a condition to check if the COUNT of bond_id is greater than zero. You can utilize a CASE statement or a subquery to avoid division by zero errors. This will ensure that you only compute the percentage if there are bonds present. \n\n3. Ensure clarity in the calculation: Rewrite the SQL query to be more explicit for better understanding. Consider using 'COUNT(*)' instead of 'COUNT(bond_id)' in the total count for all bonds associated with TR047. Also, ensure that you are accurately counting only the double bonds in your SUM calculation. \n\nThe modified SQL query might look like this: \n\nSELECT \n    CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) \n    ELSE 0 END AS percent \nFROM bond AS T1 \nWHERE T1.molecule_id = 'TR047';"
}

############################## Human at step actor_generate_sql ##############################

You are a data science expert with memory-enhanced capabilities.
Below, you are presented with a database schema, a natural language question, long-term memory (guiding principles), and short-term memory (task-specific history).
Your task is to read the schema, understand the question, and generate a valid SQLite query to answer the question.
Before generating the final SQL query, think step by step on how to write the query, leveraging both long-term and short-term memory.

Input Data:

Database Scehma:
CREATE TABLE atom (
  `atom_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `element` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE bond (
  `bond_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `bond_type` TEXT DEFAULT NULL,
  PRIMARY KEY (`bond_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE connected (
  `atom_id` TEXT NOT NULL,
  `atom_id2` TEXT NOT NULL,
  `bond_id` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`,`atom_id2`),
  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE molecule (
  `molecule_id` TEXT NOT NULL,
  `label` TEXT DEFAULT NULL,
  PRIMARY KEY (`molecule_id`)
);

Long-Term Memory:
Guiding principles and accumulated insights from prior SQL generation tasks.
1. Prefer ORDER BY + LIMIT over MAX/MIN: When finding the highest or lowest values, prioritize using ORDER BY + LIMIT 1 instead of MAX/MIN in subqueries.
2. Select columns as needed: Include sorting columns in SELECT only if explicitly requested. If no specific columns are mentioned, prefer the id column over the name column.
3. Match the question's requirements precisely: Ensure the query returns only the columns and information explicitly asked for, avoiding extra or missing content.
4. Use table aliases and filter nulls: When joining multiple tables, use T1, T2, ... as table aliases and filter null values in columns used for logical operations (e.g., sorting or calculations).
5. Avoid column concatenation: Do not use || to concatenate columns in SELECT; output the columns as they are.
6. 1. Review the bond_type representation: Ensure that the double bond is represented correctly in the database schema. If double bonds are typically represented by '=' or another consistent character, update the condition in the SQL query accordingly, e.g., change ' = ' to '=' or '==' if necessary. 

2. Handle potential division by zero: Before performing the percentage calculation, include a condition to check if the COUNT of bond_id is greater than zero. You can utilize a CASE statement or a subquery to avoid division by zero errors. This will ensure that you only compute the percentage if there are bonds present. 

3. Ensure clarity in the calculation: Rewrite the SQL query to be more explicit for better understanding. Consider using 'COUNT(*)' instead of 'COUNT(bond_id)' in the total count for all bonds associated with TR047. Also, ensure that you are accurately counting only the double bonds in your SUM calculation. 

The modified SQL query might look like this: 

SELECT 
    CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) 
    ELSE 0 END AS percent 
FROM bond AS T1 
WHERE T1.molecule_id = 'TR047';

Short-Term Memory:
Specific reasoning steps and SQL queries generated earlier in this task.
[{'chain_of_thought': "To determine the percentage of double bonds in the molecule TR047, we need to focus on the 'bond' table, where bond types are defined. We will first filter for bonds belonging to molecule TR047. Then, we will count how many of these bonds have a bond_type of ' = ' to find the double bonds. To calculate the percentage, we will divide the count of double bonds by the total count of bonds for TR047. This can be done within a single query, using conditional counting in SQLite.", 'SQL': "SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"}, "SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"]

Question: 
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. 

Hint:
TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'

Validation Rules
1. Carefully analyze the Question to extract its intent, including required conditions, expected outputs, and filters.
2. Use Long-term Memory to apply guiding principles and avoid common pitfalls in SQL query generation.
3. Refer to Short-term Memory to maintain consistency and reuse relevant logic where applicable.

Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your detailed thought process explaining the steps taken to arrive at the SQL query.",
    "SQL": "The final SQL query in a single string."
}

Take a deep breath, review all inputs systematically, and generate the most optimal SQLite query.

############################## AI at step actor_generate_sql ##############################

{
    "chain_of_thought_reasoning": "To determine the percentage of double bonds in the molecule identified by TR047, we first need to focus on the 'bond' table since this is where the type of bond (including whether it is a double bond) is defined. We will filter the entries to include only those pertaining to the molecule ID 'TR047'. For the percentage calculation, we will count the number of bonds that are classified as a double bond (which corresponds to a bond_type of '='), and we will also count the total number of bonds for 'TR047'. The percentage will then be calculated by dividing the count of double bonds by the total count of bonds, multiplied by 100 to express it as a percentage. We should also ensure we handle situations where the total count of bonds is zero to avoid division by zero errors. Adoption of the SQL principles we've established will help ensure we form a clear and correct query.",
    "SQL": "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"
}

############################## Human at step evaluator_generate_result ##############################

You are a database technology expert proficient in SQL statements.
Below, you will be presented with a natural language question, an SQL query, and the corresponding database content for that query.
Your task is to determine whether the provided SQL query correctly selects the database schema items and accurately answers the given question.
If the SQL query fails to correctly answer the question, please identify the specific errors.
Before making the final judgment, think step by step to analyze the alignment between the question, SQL query, and execution result.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

SQL Query:
SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Database Content:
{'atom': ['atom_id', 'molecule_id', 'element', 'moleculeid'], 'bond': ['bond_id', 'molecule_id', 'bond_type', 'bondtype', 'bondid', 'moleculeid'], 'connected': ['atom_id', 'atom_id2', 'bond_id', 'bondid'], 'molecule': ['molecule_id', 'label', 'moleculeid']}

Validation Guidelines:

1. Carefully analyze the Question to understand its intent, including what is being queried, conditions, filters, and expected outputs.
2. Check if the SQL Query logically corresponds to the Question, covering all necessary components such as filtering conditions, aggregations, and groupings.
3. Cross-check the Execution Result with the Question to ensure the output aligns with the intent.
4. Ensure the SQL Query is not missing any critical conditions or columns required to fulfill the Question's requirements.
5. If the SQL Query satisfies the intent and the Execution Result correctly answers the Question, consider it Valid. Otherwise, consider it Invalid.
6. Consider scenarios where the SQL Query may partially meet the intent but fails in key aspects, leading to an Invalid outcome.
7. Base your judgment strictly on the correspondence between the question, SQL query, and execution result without making assumptions.

Output Format:
Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your thought process on how you arrived at the final judgment.",
    "judgment": "Valid or Invalid"
}

Take a deep breath, review all elements carefully, and think step by step.

############################## AI at step evaluator_generate_result ##############################

{
    "chain_of_thought_reasoning": "The question asks for the percentage of chemical compounds containing the molecule TR047 that form a double bond. The SQL query correctly identifies bonds associated with the molecule TR047, using a condition in the WHERE clause. It uses a SUM with a conditional clause to count double bonds (indicated by 'bond_type = '='). However, one potential oversight is that the bond type for a double bond should typically represent a specific value (e.g., 'double' or a similar term), depending on how double bonds are categorized in the database, rather than just checking against '='. Hence, if '=' does not represent double bonds, the query would not yield accurate results. Additionally, there are no explicit checks for the bond type representing double bonds in common nomenclature. Therefore, while the query structure is reasonable and it correctly computes the desired metric for the specified molecule, it lacks specificity regarding the identification of double bonds. Thus, the query could incorrectly assess double bonds leading to potential inaccuracy in the result. Overall, it partially meets the intent but may not provide a fully accurate representation based on the context provided.",
    "judgment": "Invalid"
}

############################## Human at step Generate feedbacks ##############################

You are a data science and SQL optimization expert.
Below, you are presented with the execution result of an SQL query, an analysis of why this query does not meet the requirements, and the natural language question it aims to answer.
Your task is to generate actionable feedback to guide the modification of the SQL query so that it aligns with the question's intent.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

Predicted SQL:
SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Execution Result:
(21.428571428571427,)

Evaluation Result:
{'chain_of_thought_reasoning': "The question asks for the percentage of chemical compounds containing the molecule TR047 that form a double bond. The SQL query correctly identifies bonds associated with the molecule TR047, using a condition in the WHERE clause. It uses a SUM with a conditional clause to count double bonds (indicated by 'bond_type = '='). However, one potential oversight is that the bond type for a double bond should typically represent a specific value (e.g., 'double' or a similar term), depending on how double bonds are categorized in the database, rather than just checking against '='. Hence, if '=' does not represent double bonds, the query would not yield accurate results. Additionally, there are no explicit checks for the bond type representing double bonds in common nomenclature. Therefore, while the query structure is reasonable and it correctly computes the desired metric for the specified molecule, it lacks specificity regarding the identification of double bonds. Thus, the query could incorrectly assess double bonds leading to potential inaccuracy in the result. Overall, it partially meets the intent but may not provide a fully accurate representation based on the context provided.", 'judgment': 'Invalid'}


Please respond with a JSON object structured as follows:

{
    "feedback": "Specific, actionable steps to modify the SQL query to align with the question's intent."
}

Take a deep breath and review the inputs thoroughly. Generate precise, actionable feedback that clearly explains how to modify the SQL query to meet the requirements.

############################## AI at step Generate feedbacks ##############################

{
    "feedback": "1. Update the bond_type condition to accurately reflect the representation of double bonds in your database. Replace 'bond_type = '=' with the correct identifier for double bonds, such as 'bond_type = \"double\"' or whatever designation your schema uses for a double bond. \n\n2. Consider ensuring that you are selecting from the correct context, as the question focuses on chemical compounds rather than just bonds. If there's a corresponding table containing details about compounds, you might want to include a JOIN statement to correlate the bonds with their respective compounds to ensure you're analyzing the correct set of chemical compounds.\n\n3. Ensure that you're aggregating the total number of distinct compounds that contain the molecule TR047 to improve the accuracy of your percentage calculation, instead of just summing bond IDs. This could mean using a COUNT(DISTINCT compound_id) depending on how your schema is set up.\n\n4. Alternatively, base your query on the distinct compound counts to avoid double counting bonds of a single compound.\n\nBy implementing these adjustments, you'll enhance the accuracy of your percentage calculation based on the original intent of identifying double bonds among all relevant chemical compounds."
}

############################## Human at step actor_generate_sql ##############################

You are a data science expert with memory-enhanced capabilities.
Below, you are presented with a database schema, a natural language question, long-term memory (guiding principles), and short-term memory (task-specific history).
Your task is to read the schema, understand the question, and generate a valid SQLite query to answer the question.
Before generating the final SQL query, think step by step on how to write the query, leveraging both long-term and short-term memory.

Input Data:

Database Scehma:
CREATE TABLE atom (
  `atom_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `element` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE bond (
  `bond_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `bond_type` TEXT DEFAULT NULL,
  PRIMARY KEY (`bond_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE connected (
  `atom_id` TEXT NOT NULL,
  `atom_id2` TEXT NOT NULL,
  `bond_id` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`,`atom_id2`),
  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE molecule (
  `molecule_id` TEXT NOT NULL,
  `label` TEXT DEFAULT NULL,
  PRIMARY KEY (`molecule_id`)
);

Long-Term Memory:
Guiding principles and accumulated insights from prior SQL generation tasks.
1. Prefer ORDER BY + LIMIT over MAX/MIN: When finding the highest or lowest values, prioritize using ORDER BY + LIMIT 1 instead of MAX/MIN in subqueries.
2. Select columns as needed: Include sorting columns in SELECT only if explicitly requested. If no specific columns are mentioned, prefer the id column over the name column.
3. Match the question's requirements precisely: Ensure the query returns only the columns and information explicitly asked for, avoiding extra or missing content.
4. Use table aliases and filter nulls: When joining multiple tables, use T1, T2, ... as table aliases and filter null values in columns used for logical operations (e.g., sorting or calculations).
5. Avoid column concatenation: Do not use || to concatenate columns in SELECT; output the columns as they are.
6. 1. Review the bond_type representation: Ensure that the double bond is represented correctly in the database schema. If double bonds are typically represented by '=' or another consistent character, update the condition in the SQL query accordingly, e.g., change ' = ' to '=' or '==' if necessary. 

2. Handle potential division by zero: Before performing the percentage calculation, include a condition to check if the COUNT of bond_id is greater than zero. You can utilize a CASE statement or a subquery to avoid division by zero errors. This will ensure that you only compute the percentage if there are bonds present. 

3. Ensure clarity in the calculation: Rewrite the SQL query to be more explicit for better understanding. Consider using 'COUNT(*)' instead of 'COUNT(bond_id)' in the total count for all bonds associated with TR047. Also, ensure that you are accurately counting only the double bonds in your SUM calculation. 

The modified SQL query might look like this: 

SELECT 
    CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) 
    ELSE 0 END AS percent 
FROM bond AS T1 
WHERE T1.molecule_id = 'TR047';
7. 1. Update the bond_type condition to accurately reflect the representation of double bonds in your database. Replace 'bond_type = '=' with the correct identifier for double bonds, such as 'bond_type = "double"' or whatever designation your schema uses for a double bond. 

2. Consider ensuring that you are selecting from the correct context, as the question focuses on chemical compounds rather than just bonds. If there's a corresponding table containing details about compounds, you might want to include a JOIN statement to correlate the bonds with their respective compounds to ensure you're analyzing the correct set of chemical compounds.

3. Ensure that you're aggregating the total number of distinct compounds that contain the molecule TR047 to improve the accuracy of your percentage calculation, instead of just summing bond IDs. This could mean using a COUNT(DISTINCT compound_id) depending on how your schema is set up.

4. Alternatively, base your query on the distinct compound counts to avoid double counting bonds of a single compound.

By implementing these adjustments, you'll enhance the accuracy of your percentage calculation based on the original intent of identifying double bonds among all relevant chemical compounds.

Short-Term Memory:
Specific reasoning steps and SQL queries generated earlier in this task.
[{'chain_of_thought': "To determine the percentage of double bonds in the molecule TR047, we need to focus on the 'bond' table, where bond types are defined. We will first filter for bonds belonging to molecule TR047. Then, we will count how many of these bonds have a bond_type of ' = ' to find the double bonds. To calculate the percentage, we will divide the count of double bonds by the total count of bonds for TR047. This can be done within a single query, using conditional counting in SQLite.", 'SQL': "SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"}, "SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"]

Question: 
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. 

Hint:
TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'

Validation Rules
1. Carefully analyze the Question to extract its intent, including required conditions, expected outputs, and filters.
2. Use Long-term Memory to apply guiding principles and avoid common pitfalls in SQL query generation.
3. Refer to Short-term Memory to maintain consistency and reuse relevant logic where applicable.

Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your detailed thought process explaining the steps taken to arrive at the SQL query.",
    "SQL": "The final SQL query in a single string."
}

Take a deep breath, review all inputs systematically, and generate the most optimal SQLite query.

############################## AI at step actor_generate_sql ##############################

{
    "chain_of_thought_reasoning": "To compute the percentage of double bonds in molecule TR047, I will focus on the 'bond' table, filtering for bonds that belong to the specific molecule TR047. The bond type for a double bond is represented by ' = '. I need to sum the occurrences of double bonds and divide that by the total count of all bonds for TR047 to get the percentage. Since it\u2019s important to avoid division by zero, I'll implement a CASE statement to check for this condition. The structure will involve a SELECT statement that computes the percentage based on the given logic, ensuring the query properly reflects the counts and conditional logic specified in the question.",
    "SQL": "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"
}

############################## Human at step evaluator_generate_result ##############################

You are a database technology expert proficient in SQL statements.
Below, you will be presented with a natural language question, an SQL query, and the corresponding database content for that query.
Your task is to determine whether the provided SQL query correctly selects the database schema items and accurately answers the given question.
If the SQL query fails to correctly answer the question, please identify the specific errors.
Before making the final judgment, think step by step to analyze the alignment between the question, SQL query, and execution result.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

SQL Query:
SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Database Content:
{'atom': ['atom_id', 'molecule_id', 'element', 'moleculeid'], 'bond': ['bond_id', 'molecule_id', 'bond_type', 'bondtype', 'bondid', 'moleculeid'], 'connected': ['atom_id', 'atom_id2', 'bond_id', 'bondid'], 'molecule': ['molecule_id', 'label', 'moleculeid']}

Validation Guidelines:

1. Carefully analyze the Question to understand its intent, including what is being queried, conditions, filters, and expected outputs.
2. Check if the SQL Query logically corresponds to the Question, covering all necessary components such as filtering conditions, aggregations, and groupings.
3. Cross-check the Execution Result with the Question to ensure the output aligns with the intent.
4. Ensure the SQL Query is not missing any critical conditions or columns required to fulfill the Question's requirements.
5. If the SQL Query satisfies the intent and the Execution Result correctly answers the Question, consider it Valid. Otherwise, consider it Invalid.
6. Consider scenarios where the SQL Query may partially meet the intent but fails in key aspects, leading to an Invalid outcome.
7. Base your judgment strictly on the correspondence between the question, SQL query, and execution result without making assumptions.

Output Format:
Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your thought process on how you arrived at the final judgment.",
    "judgment": "Valid or Invalid"
}

Take a deep breath, review all elements carefully, and think step by step.

############################## AI at step evaluator_generate_result ##############################

{
    "chain_of_thought_reasoning": "Let's break down the components step by step. The question asks for the percentage of chemical compounds (specifically for molecule 'TR047') that form a double bond. In chemical terms, a double bond is generally referred to as '==' in bonding notation, which seems to be indicated here by the bond_type. Thus, in the SQL query, we look for instances where bond_type is equal to ' = '. However, there appears to be a mistake in the bond_type representation since it should most likely be '==' as the common representation for a double bond. The SQL query counts all the bond entries for molecule 'TR047' and calculates the percentage of those which are double bonds (conditional on bond_type). Additionally, the condition checks if there are any bonds associated with the molecule before calculating the percentage to avoid division by zero, which is logically sound. Therefore, the query is logically constructed, but it utilizes an incorrect representation for double bonds. Consequently, the SQL fails to return the correct percentage of double bonds as it mistakenly looks for bonds with bond_type ' = ' instead of the appropriate bond_type for double bonds. Thus, the SQL query does not correctly answer the question.",
    "judgment": "Invalid"
}

############################## Human at step Generate feedbacks ##############################

You are a data science and SQL optimization expert.
Below, you are presented with the execution result of an SQL query, an analysis of why this query does not meet the requirements, and the natural language question it aims to answer.
Your task is to generate actionable feedback to guide the modification of the SQL query so that it aligns with the question's intent.

Input Data

Question:
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.

Predicted SQL:
SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';

Execution Result:
(0.0,)

Evaluation Result:
{'chain_of_thought_reasoning': "Let's break down the components step by step. The question asks for the percentage of chemical compounds (specifically for molecule 'TR047') that form a double bond. In chemical terms, a double bond is generally referred to as '==' in bonding notation, which seems to be indicated here by the bond_type. Thus, in the SQL query, we look for instances where bond_type is equal to ' = '. However, there appears to be a mistake in the bond_type representation since it should most likely be '==' as the common representation for a double bond. The SQL query counts all the bond entries for molecule 'TR047' and calculates the percentage of those which are double bonds (conditional on bond_type). Additionally, the condition checks if there are any bonds associated with the molecule before calculating the percentage to avoid division by zero, which is logically sound. Therefore, the query is logically constructed, but it utilizes an incorrect representation for double bonds. Consequently, the SQL fails to return the correct percentage of double bonds as it mistakenly looks for bonds with bond_type ' = ' instead of the appropriate bond_type for double bonds. Thus, the SQL query does not correctly answer the question.", 'judgment': 'Invalid'}


Please respond with a JSON object structured as follows:

{
    "feedback": "Specific, actionable steps to modify the SQL query to align with the question's intent."
}

Take a deep breath and review the inputs thoroughly. Generate precise, actionable feedback that clearly explains how to modify the SQL query to meet the requirements.

############################## AI at step Generate feedbacks ##############################

{
    "feedback": "To modify the SQL query to align with the question's intent, you should change the bond_type check to correctly identify double bonds. Replace ' = ' with '==' in the condition where you are checking for double bonds. The updated query should look like this: SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '==' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'; This alteration will ensure that the query accurately identifies the proportion of bonds that are double bonds for the specified molecule 'TR047'."
}

############################## Human at step actor_generate_sql ##############################

You are a data science expert with memory-enhanced capabilities.
Below, you are presented with a database schema, a natural language question, long-term memory (guiding principles), and short-term memory (task-specific history).
Your task is to read the schema, understand the question, and generate a valid SQLite query to answer the question.
Before generating the final SQL query, think step by step on how to write the query, leveraging both long-term and short-term memory.

Input Data:

Database Scehma:
CREATE TABLE atom (
  `atom_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `element` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE bond (
  `bond_id` TEXT NOT NULL,
  `molecule_id` TEXT DEFAULT NULL,
  `bond_type` TEXT DEFAULT NULL,
  PRIMARY KEY (`bond_id`),
  FOREIGN KEY (`molecule_id`) REFERENCES `molecule` (`molecule_id`)
);

CREATE TABLE connected (
  `atom_id` TEXT NOT NULL,
  `atom_id2` TEXT NOT NULL,
  `bond_id` TEXT DEFAULT NULL,
  PRIMARY KEY (`atom_id`,`atom_id2`),
  FOREIGN KEY (`atom_id`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`atom_id2`) REFERENCES `atom` (`atom_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`bond_id`) REFERENCES `bond` (`bond_id`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE molecule (
  `molecule_id` TEXT NOT NULL,
  `label` TEXT DEFAULT NULL,
  PRIMARY KEY (`molecule_id`)
);

Long-Term Memory:
Guiding principles and accumulated insights from prior SQL generation tasks.
1. Prefer ORDER BY + LIMIT over MAX/MIN: When finding the highest or lowest values, prioritize using ORDER BY + LIMIT 1 instead of MAX/MIN in subqueries.
2. Select columns as needed: Include sorting columns in SELECT only if explicitly requested. If no specific columns are mentioned, prefer the id column over the name column.
3. Match the question's requirements precisely: Ensure the query returns only the columns and information explicitly asked for, avoiding extra or missing content.
4. Use table aliases and filter nulls: When joining multiple tables, use T1, T2, ... as table aliases and filter null values in columns used for logical operations (e.g., sorting or calculations).
5. Avoid column concatenation: Do not use || to concatenate columns in SELECT; output the columns as they are.
6. 1. Review the bond_type representation: Ensure that the double bond is represented correctly in the database schema. If double bonds are typically represented by '=' or another consistent character, update the condition in the SQL query accordingly, e.g., change ' = ' to '=' or '==' if necessary. 

2. Handle potential division by zero: Before performing the percentage calculation, include a condition to check if the COUNT of bond_id is greater than zero. You can utilize a CASE statement or a subquery to avoid division by zero errors. This will ensure that you only compute the percentage if there are bonds present. 

3. Ensure clarity in the calculation: Rewrite the SQL query to be more explicit for better understanding. Consider using 'COUNT(*)' instead of 'COUNT(bond_id)' in the total count for all bonds associated with TR047. Also, ensure that you are accurately counting only the double bonds in your SUM calculation. 

The modified SQL query might look like this: 

SELECT 
    CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) 
    ELSE 0 END AS percent 
FROM bond AS T1 
WHERE T1.molecule_id = 'TR047';
7. 1. Update the bond_type condition to accurately reflect the representation of double bonds in your database. Replace 'bond_type = '=' with the correct identifier for double bonds, such as 'bond_type = "double"' or whatever designation your schema uses for a double bond. 

2. Consider ensuring that you are selecting from the correct context, as the question focuses on chemical compounds rather than just bonds. If there's a corresponding table containing details about compounds, you might want to include a JOIN statement to correlate the bonds with their respective compounds to ensure you're analyzing the correct set of chemical compounds.

3. Ensure that you're aggregating the total number of distinct compounds that contain the molecule TR047 to improve the accuracy of your percentage calculation, instead of just summing bond IDs. This could mean using a COUNT(DISTINCT compound_id) depending on how your schema is set up.

4. Alternatively, base your query on the distinct compound counts to avoid double counting bonds of a single compound.

By implementing these adjustments, you'll enhance the accuracy of your percentage calculation based on the original intent of identifying double bonds among all relevant chemical compounds.
8. To modify the SQL query to align with the question's intent, you should change the bond_type check to correctly identify double bonds. Replace ' = ' with '==' in the condition where you are checking for double bonds. The updated query should look like this: SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '==' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'; This alteration will ensure that the query accurately identifies the proportion of bonds that are double bonds for the specified molecule 'TR047'.

Short-Term Memory:
Specific reasoning steps and SQL queries generated earlier in this task.
["SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';", "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"]

Question: 
Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond. 

Hint:
TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'

Validation Rules
1. Carefully analyze the Question to extract its intent, including required conditions, expected outputs, and filters.
2. Use Long-term Memory to apply guiding principles and avoid common pitfalls in SQL query generation.
3. Refer to Short-term Memory to maintain consistency and reuse relevant logic where applicable.

Please respond with a JSON object structured as follows:

{
    "chain_of_thought_reasoning": "Your detailed thought process explaining the steps taken to arrive at the SQL query.",
    "SQL": "The final SQL query in a single string."
}

Take a deep breath, review all inputs systematically, and generate the most optimal SQLite query.

############################## AI at step actor_generate_sql ##############################

{
    "chain_of_thought_reasoning": "To answer the question of identifying the percentage of double bonds among all chemical compounds that contain the molecule TR047, I need to focus on the bond table where the molecule_id matches 'TR047'. The percentage is calculated by taking the sum of double bonds and dividing it by the total count of bonds associated with TR047. According to my understanding from the guiding principles, I need to incorporate a CASE statement to avoid division by zero in case there are no bonds for the molecule. The 'bond_type' for double bonds is identified as '=' based on the hint provided, but I need to check if this representation is correct. I'll stick to the syntax that aligns with SQL standards, using COUNT(bond_id) for the total number of bonds, while SUM will count how many of these bonds are double bonds. After applying these principles, the SQL query can be constructed as: SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'; This approach not only avoids errors associated with cases of no bonds but also precisely addresses the question's requirements.",
    "SQL": "SELECT CASE WHEN COUNT(bond_id) > 0 THEN (SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) ELSE 0 END AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047';"
}

